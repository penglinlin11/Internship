{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9aea5bb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number to find its factorial: 123\n",
      "The factorial of 123 is: 12146304367025329675766243241881295855454217088483382315328918161829235892362167668831156960612640202170735835221294047782591091570411651472186029519906261646730733907419814952960000000000000000000000000000\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "user_input = input(\"Enter a number to find its factorial: \")\n",
    "\n",
    "if re.match(r'^\\d+$', user_input):\n",
    "    num = int(user_input)\n",
    "\n",
    "    factorial = 1\n",
    "    for i in range(1, num + 1):\n",
    "        factorial *= i\n",
    "\n",
    "    print(f\"The factorial of {num} is: {factorial}\")\n",
    "\n",
    "else:\n",
    "    print(\"Invalid input. Please enter a non-negative integer.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1385f87b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number to check if it's prime or composite: 34\n",
      "34 is a composite number.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "user_input = input(\"Enter a number to check if it's prime or composite: \")\n",
    "\n",
    "if re.match(r'^\\d+$', user_input):\n",
    "    num = int(user_input)\n",
    "\n",
    "    if num > 1:\n",
    "        for i in range(2, int(num**0.5) + 1):\n",
    "            if (num % i) == 0:\n",
    "                print(f\"{num} is a composite number.\")\n",
    "                break\n",
    "        else:\n",
    "            print(f\"{num} is a prime number.\")\n",
    "    else:\n",
    "        print(f\"{num} is neither prime nor composite.\")\n",
    "\n",
    "else:\n",
    "    print(\"Invalid input. Please enter a non-negative integer.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "88f41127",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a string to check if it's a palindrome: asdfgfdsa\n",
      "The string 'asdfgfdsa' is a palindrome.\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "user_input = input(\"Enter a string to check if it's a palindrome: \")\n",
    "\n",
    "cleaned_input = re.sub(r'[^a-zA-Z0-9]', '', user_input.lower())\n",
    "\n",
    "if cleaned_input == cleaned_input[::-1]:\n",
    "    print(f\"The string '{user_input}' is a palindrome.\")\n",
    "else:\n",
    "    print(f\"The string '{user_input}' is not a palindrome.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fe295c5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the length of the first side: 2\n",
      "Enter the length of the second side: 4\n",
      "The length of the third side is: 4.47213595499958\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "side1 = input(\"Enter the length of the first side: \")\n",
    "side2 = input(\"Enter the length of the second side: \")\n",
    "\n",
    "if re.match(r'^\\d+$', side1) and re.match(r'^\\d+$', side2):\n",
    "    side1, side2 = int(side1), int(side2)\n",
    "\n",
    "    side3 = (side1**2 + side2**2)**0.5\n",
    "\n",
    "    print(f\"The length of the third side is: {side3}\")\n",
    "\n",
    "else:\n",
    "    print(\"Invalid input. Please enter non-negative integers for the sides.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "702335b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a string: fdsgbfdnhgdjd\n",
      "Frequency of each character:\n",
      "f: 2\n",
      "d: 4\n",
      "s: 1\n",
      "g: 2\n",
      "b: 1\n",
      "n: 1\n",
      "h: 1\n",
      "j: 1\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "user_input = input(\"Enter a string: \")\n",
    "\n",
    "cleaned_input = re.sub(r'[^a-zA-Z0-9]', '', user_input.lower())\n",
    "\n",
    "frequency = {}\n",
    "for char in cleaned_input:\n",
    "    if char in frequency:\n",
    "        frequency[char] += 1\n",
    "    else:\n",
    "        frequency[char] = 1\n",
    "\n",
    "print(\"Frequency of each character:\")\n",
    "for char, count in frequency.items():\n",
    "    print(f\"{char}: {count}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "898b0ea7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
